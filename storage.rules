rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isValidFileType() {
      return request.resource.contentType.matches('image/.*|video/.*|audio/.*|application/.*');
    }
    
    function isValidFileSize() {
      return request.resource.size < 100 * 1024 * 1024; // 100MB max
    }
    
    function isChatParticipant(chatId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/chats/$(chatId)/participants/$(request.auth.uid));
    }

    function isRepositoryOwner(repoId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/repositories/$(repoId)) &&
        get(/databases/$(database)/documents/repositories/$(repoId)).data.ownerId == request.auth.uid;
    }

    function isRepositoryCollaborator(repoId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/repositories/$(repoId)/collaborators/$(request.auth.uid));
    }

    // Chat media files
    match /chats/{chatId}/{fileType}/{fileName} {
      allow read: if isAuthenticated() && isChatParticipant(chatId);
      allow write: if isAuthenticated() 
        && isChatParticipant(chatId)
        && isValidFileType()
        && isValidFileSize();
    }

    // User profile images
    match /users/{userId}/profile/{fileName} {
      allow read: if true;
      allow write: if isAuthenticated() 
        && request.auth.uid == userId
        && request.resource.contentType.matches('image/.*')
        && request.resource.size < 5 * 1024 * 1024; // 5MB max
    }

    // Repository files
    match /repositories/{repoId}/branches/{branchId}/{fileName} {
      allow read: if isAuthenticated() && (
        isRepositoryOwner(repoId) || 
        isRepositoryCollaborator(repoId) ||
        get(/databases/$(database)/documents/repositories/$(repoId)).data.isPrivate == false
      );
      allow write: if isAuthenticated() && (
        isRepositoryOwner(repoId) || 
        isRepositoryCollaborator(repoId)
      ) && isValidFileType() && isValidFileSize();
    }

    // User uploads (temporary storage)
    match /uploads/{userId}/{fileName} {
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow write: if isAuthenticated() 
        && request.auth.uid == userId
        && isValidFileType()
        && request.resource.size < 50 * 1024 * 1024; // 50MB max for temporary uploads
    }

    // Public assets
    match /public/{fileName} {
      allow read: if true;
      allow write: if false; // Only admin can write public assets
    }
  }
} 